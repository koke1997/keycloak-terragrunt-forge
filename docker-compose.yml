version: '3.8'

services:
  # React TypeScript Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: keycloak-forge-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:8080
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - keycloak-forge-network

  # Java Spring Boot Backend
  backend:
    build:
      context: ./backend-java
      dockerfile: Dockerfile
    container_name: keycloak-forge-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://postgres:5432/keycloak_forge
      - DATABASE_USERNAME=forge_user
      - DATABASE_PASSWORD=forge_password
      - REDIS_URL=redis://redis:6379
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_ADMIN_USERNAME=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - keycloak-forge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: keycloak-forge-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: keycloak_forge
      POSTGRES_USER: forge_user
      POSTGRES_PASSWORD: forge_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/scripts/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - keycloak-forge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forge_user -d keycloak_forge"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Server (for testing and validation)
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.0
    container_name: keycloak-forge-keycloak
    ports:
      - "8090:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: forge_user
      KC_DB_PASSWORD: forge_password
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
    command: 
      - start-dev
      - --import-realm
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./data/samples:/opt/keycloak/data/import
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - keycloak-forge-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s

  # Redis Cache (for performance)
  redis:
    image: redis:7-alpine
    container_name: keycloak-forge-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - keycloak-forge-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # NGINX Reverse Proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: keycloak-forge-nginx
    ports:
      - "80:80"
    volumes:
      - ./tools/scripts/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - keycloak-forge-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  keycloak_data:
    driver: local
  redis_data:
    driver: local

networks:
  keycloak-forge-network:
    driver: bridge